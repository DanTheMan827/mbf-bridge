name: "Build"

on:
  workflow_dispatch:
  push:
    branches:
      - '*'

env:
  OPENSSL_VERSION: "3.4.1"
  NDK: r27c

jobs:
  build:
    name: "Build for ${{ matrix.os }} ${{ matrix.arch }}"
    runs-on: ${{ matrix.os }}
    continue-on-error: true
    strategy:
      matrix:
        include:
          - os: windows-latest
            arch: i686-pc-windows-msvc
            artifact_name: "mbf-bridge-windows-x86"
            binary_extension: ".exe"

          - os: windows-latest
            arch: x86_64-pc-windows-msvc
            artifact_name: "mbf-bridge-windows-x64"
            binary_extension: ".exe"

          - os: ubuntu-latest
            arch: x86_64-unknown-linux-gnu
            artifact_name: "mbf-bridge-linux-x64"

          - os: ubuntu-latest
            arch: aarch64-linux-android
            artifact_name: "mbf-bridge-android-aarch64"

          - os: ubuntu-latest
            arch: x86_64-linux-android
            artifact_name: "mbf-bridge-android-x86_64"

          - os: macos-13
            arch: x86_64-apple-darwin
            artifact_name: "mbf-bridge-macos-intel"

          - os: macos-13
            arch: aarch64-apple-darwin
            artifact_name: "mbf-bridge-macos-arm"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/
            target/
          key: ${{ matrix.os }}-${{ matrix.arch }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ matrix.os }}-${{ matrix.arch }}-cargo-

      - name: Install Rust toolchain
        run: rustup target add ${{ matrix.arch }}

      - name: Install dependencies (Linux only)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libglib2.0-dev \
            libgtk-3-dev

      - name: Restore NDK cache (Android only)
        id: ndk_cache
        if: matrix.arch == 'aarch64-linux-android' || matrix.arch == 'x86_64-linux-android'
        uses: actions/cache/restore@v4
        with:
          path: ~/android-ndk-${{ env.NDK }}
          key: linux-android-ndk-${{ env.NDK }}

      - name: Install NDK (Android only)
        if: (matrix.arch == 'aarch64-linux-android' || matrix.arch == 'x86_64-linux-android') && steps.ndk_cache.outputs.cache-hit != 'true'
        run: |
          curl -L "https://dl.google.com/android/repository/android-ndk-${{ env.NDK }}-linux.zip" -o ndk.zip
          unzip ndk.zip -d ~
          rm ndk.zip

      - name: Save NDK cache (Android only)
        if: (matrix.arch == 'aarch64-linux-android' || matrix.arch == 'x86_64-linux-android') && steps.ndk_cache.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: ~/android-ndk-${{ env.NDK }}
          key: linux-android-ndk-${{ env.NDK }}

      - name: Export Android NDK path (Android only)
        if: matrix.arch == 'aarch64-linux-android' || matrix.arch == 'x86_64-linux-android'
        run: |
          export ANDROID_NDK_HOME=~/android-ndk-${{ env.NDK }}
          echo "ANDROID_NDK_HOME=$ANDROID_NDK_HOME" >> $GITHUB_ENV
          echo "ANDROID_NDK_ROOT=$ANDROID_NDK_HOME" >> $GITHUB_ENV
          echo "PATH=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin:$PATH" >> $GITHUB_ENV

      - name: Create cargo config
        if: matrix.arch == 'aarch64-linux-android' || matrix.arch == 'x86_64-linux-android'
        run: |
          echo '[target.aarch64-linux-android]
          ar = "${{ env.ANDROID_NDK_ROOT }}/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar"
          linker = "${{ env.ANDROID_NDK_ROOT }}/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android31-clang"' > /home/runner/.cargo/config.toml

          echo '[target.x86_64-linux-android]
          ar = "${{ env.ANDROID_NDK_ROOT }}/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar"
          linker = "${{ env.ANDROID_NDK_ROOT }}/toolchains/llvm/prebuilt/linux-x86_64/bin/x86_64-linux-android31-clang"' > /home/runner/.cargo/config.toml

      - name: Build (Release)
        shell: bash
        run: |
          cargo build --release --target ${{ matrix.arch }}

      - name: Upload artifact (Release)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}-release
          path: target/${{ matrix.arch }}/release/mbf_bridge${{ matrix.binary_extension }}

      - name: Build (Debug)
        shell: bash
        run: |
          cargo build --target ${{ matrix.arch }}

      - name: Upload artifact (Debug)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}-debug
          path: target/${{ matrix.arch }}/debug/mbf_bridge${{ matrix.binary_extension }}

  lipo:
    name: "Create macOS universal binary"
    runs-on: macos-13
    needs: build
    strategy:
      matrix:
        build_type: [ "release", "debug"]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: target/

      - name: Create universal binary
        run: |
          lipo -create -output ModsBeforeFriday.app/Contents/MacOS/mbf-bridge \
            target/mbf-bridge-macos-intel-${{ matrix.build_type }}/mbf_bridge \
            target/mbf-bridge-macos-arm-${{ matrix.build_type }}/mbf_bridge

      - name: Prepare macOS app bundle
        run: |
          mkdir build
          mv ModsBeforeFriday.app build

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: mbf-bridge-macos-universal-${{ matrix.build_type }}
          path: build
